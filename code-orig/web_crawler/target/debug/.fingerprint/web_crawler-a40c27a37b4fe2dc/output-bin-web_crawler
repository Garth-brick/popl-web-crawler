{"message":"recursion in an `async fn` requires boxing","code":{"code":"E0733","explanation":"An [`async`] function used recursion without boxing.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0733\nasync fn foo(n: usize) {\n    if n > 0 {\n        foo(n - 1).await;\n    }\n}\n```\n\nTo perform async recursion, the `async fn` needs to be desugared such that the\n`Future` is explicit in the return type:\n\n```edition2018,compile_fail,E0720\nuse std::future::Future;\nfn foo_desugared(n: usize) -> impl Future<Output = ()> {\n    async move {\n        if n > 0 {\n            foo_desugared(n - 1).await;\n        }\n    }\n}\n```\n\nFinally, the future is wrapped in a pinned box:\n\n```edition2018\nuse std::future::Future;\nuse std::pin::Pin;\nfn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {\n    Box::pin(async move {\n        if n > 0 {\n            foo_recursive(n - 1).await;\n        }\n    })\n}\n```\n\nThe `Box<...>` ensures that the result is of known size, and the pin is\nrequired to keep it in the same place in memory.\n\n[`async`]: https://doc.rust-lang.org/std/keyword.async.html\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":560,"byte_end":586,"line_start":23,"line_end":23,"column_start":42,"column_end":68,"is_primary":true,"text":[{"text":"async fn crawl(url: &str, depth: i32) -> Result<(), Box<dyn Error>> {","highlight_start":42,"highlight_end":68}],"label":"recursive `async fn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":560,"byte_end":586,"line_start":23,"line_end":23,"column_start":42,"column_end":68,"is_primary":false,"text":[{"text":"async fn crawl(url: &str, depth: i32) -> Result<(), Box<dyn Error>> {","highlight_start":42,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a recursive `async fn` must be rewritten to return a boxed `dyn Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async_recursion` crate: https://crates.io/crates/async_recursion","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0733]\u001b[0m\u001b[0m\u001b[1m: recursion in an `async fn` requires boxing\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:23:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn crawl(url: &str, depth: i32) -> Result<(), Box<dyn Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrecursive `async fn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0733`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0733`.\u001b[0m\n"}
